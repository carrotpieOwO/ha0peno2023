/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/models/character.gltf
*/

import React, { useEffect, useRef, useState } from 'react'
import { useGLTF, useAnimations, useScroll } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { useCharacterAnimations } from '../contexts/Animations'

export const Character = (props) => {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('./models/character.gltf')
  const { actions, names, mixer } = useAnimations(animations, group)
  const [ helloFinish, setHelloFinish ] = useState(false);
  const { animation, setAnimation } = useCharacterAnimations()

  console.log('names', names)
  const scroll = useScroll();

  useEffect(() => {
    // hello 애니메이션 종료 직후 dance애니메이션을 실행하기 위해 애니메이션 종료를 알려준다.
    actions['hello'].clampWhenFinished = true;
    actions['hello'].repetitions = 3

    const mixerListener = mixer.addEventListener('finished', () => {
      setHelloFinish(true)
    })

    return () => mixer.removeEventListener('finished', mixerListener);
  
  }, [actions, mixer]);

  useEffect(() => {
    if(animation) {
      actions[animation].reset().fadeIn(0.5).play();
    }
  
    return () => {
      if(animation) {
        actions[animation].fadeOut(0.5)
      }
    }
  }, [animation])
  
  useFrame((state, delta) => {
    const r1 = scroll.range( 0/4, 1/4);
    const r2 = scroll.range( 1/4, 1/4 );
    const r4 = scroll.range( 3/4, 3/4);
  
    if( r1 === 0) {
      // 스크롤이 최상단에 있을 경우 hello애니메이션이 종료되면 dance애니메이션을 실행시킨다.
      helloFinish && setAnimation('dance')

    } else if (r1 < 1) {
      // section2(about)로 넘어가기 이전까지의 애니메이션 = swim
      setAnimation('swim')
      group.current.rotation.y = -0.7
    }

    if(r1 >= 1 && r2 < 0.5 ) {
      // section2 애니메이션 = pose + 회전
      setAnimation('pose')
      group.current.rotation.y = group.current.rotation.y += 0.03
    }

    if(r1 >= 1 && r2 > 0.5 &&  r4 < 0.3) {
      // section3(projects)으로 넘어가기 이전까지의 애니메이션 = spin
      setAnimation('spin')
      group.current.rotation.y = 0
    }

    if(r4 > 0.3) {
      // section4(contact) 애니메이션 = sitting
      setAnimation('sitting')
    }
  })

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Chloe" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <group name="Chloe_body" />
          <group name="Chloe_head">
            <group name="Chloe_head_eyes">
              <group name="Chloe_head_eyes_L" />
              <group name="Chloe_head_eyes_R" />
            </group>
          </group>
        </group>
        <group name="Chloe_hair" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <group name="Chloe_hair_back" />
          <group name="Chloe_hair_bangs" />
          <group name="Chloe_hair_side" />
        </group>
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh castShadow name="Chloe_body_lower" geometry={nodes.Chloe_body_lower.geometry} material={materials['매테리얼.001']} skeleton={nodes.Chloe_body_lower.skeleton} />
          <skinnedMesh castShadow name="Chloe_body_shoes_L" geometry={nodes.Chloe_body_shoes_L.geometry} material={materials['매테리얼.001']} skeleton={nodes.Chloe_body_shoes_L.skeleton} />
          <skinnedMesh castShadow name="Chloe_body_shoes_R" geometry={nodes.Chloe_body_shoes_R.geometry} material={materials['매테리얼.001']} skeleton={nodes.Chloe_body_shoes_R.skeleton} />
          <skinnedMesh castShadow name="Chloe_body_upper" geometry={nodes.Chloe_body_upper.geometry} material={materials['매테리얼.001']} skeleton={nodes.Chloe_body_upper.skeleton} />
          <skinnedMesh castShadow name="Chloe_hair_back_01" geometry={nodes.Chloe_hair_back_01.geometry} material={materials.hair} skeleton={nodes.Chloe_hair_back_01.skeleton} />
          <skinnedMesh castShadow name="Chloe_hair_bangs_02" geometry={nodes.Chloe_hair_bangs_02.geometry} material={materials.hair} skeleton={nodes.Chloe_hair_bangs_02.skeleton} />
          <skinnedMesh castShadow name="Chloe_hair_side_04" geometry={nodes.Chloe_hair_side_04.geometry} material={materials.hair} skeleton={nodes.Chloe_hair_side_04.skeleton} />
          <skinnedMesh castShadow name="Chloe_head_eyebrows" geometry={nodes.Chloe_head_eyebrows.geometry} material={materials.lambert1} skeleton={nodes.Chloe_head_eyebrows.skeleton} />
          <skinnedMesh castShadow name="Chloe_head_eyes_L_ball" geometry={nodes.Chloe_head_eyes_L_ball.geometry} material={materials.매테리얼} skeleton={nodes.Chloe_head_eyes_L_ball.skeleton} />
          <skinnedMesh castShadow name="Chloe_head_eyes_R_ball" geometry={nodes.Chloe_head_eyes_R_ball.geometry} material={materials.매테리얼} skeleton={nodes.Chloe_head_eyes_R_ball.skeleton} />
          <skinnedMesh castShadow name="Chloe_head_face" geometry={nodes.Chloe_head_face.geometry} material={materials.매테리얼} skeleton={nodes.Chloe_head_face.skeleton} />
          <skinnedMesh castShadow name="Chloe_head_teeth_lower" geometry={nodes.Chloe_head_teeth_lower.geometry} material={materials.lambert1} skeleton={nodes.Chloe_head_teeth_lower.skeleton} />
          <skinnedMesh castShadow name="Chloe_head_teeth_upper" geometry={nodes.Chloe_head_teeth_upper.geometry} material={materials.lambert1} skeleton={nodes.Chloe_head_teeth_upper.skeleton} />
          <skinnedMesh castShadow name="Chloe_head_tongue" geometry={nodes.Chloe_head_tongue.geometry} material={materials.lambert1} skeleton={nodes.Chloe_head_tongue.skeleton} />
        </group>
      </group>
    </group>
  )
}

export default Character;
useGLTF.preload('./models/character.gltf')
